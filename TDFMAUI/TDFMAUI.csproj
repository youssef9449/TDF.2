<?xml version="1.0" encoding="utf-8"?>
<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFrameworks>net8.0-ios;net8.0-maccatalyst;net8.0-android</TargetFrameworks>
		<TargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows'))">$(TargetFrameworks);net8.0-windows10.0.19041.0</TargetFrameworks>

		<!-- Disable AOT compilation for all platforms -->
		<RunAOTCompilation>false</RunAOTCompilation>
		<PublishTrimmed>false</PublishTrimmed>
		<EnablePackageSourceMapping>false</EnablePackageSourceMapping>

		<!-- Specify only x64 architecture for Windows -->
		<RuntimeIdentifiers Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">win10-x64</RuntimeIdentifiers>
		<RuntimeIdentifiers Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'">iossimulator-x64</RuntimeIdentifiers>
		<RuntimeIdentifiers Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst'">maccatalyst-x64</RuntimeIdentifiers>

		<OutputType>Exe</OutputType>
		<RootNamespace>TDFMAUI</RootNamespace>
		<UseMaui>true</UseMaui>
		<SingleProject>true</SingleProject>
		<ImplicitUsings>enable</ImplicitUsings>
		<Nullable>disable</Nullable>
		<WarningsNotAsErrors>NU1605</WarningsNotAsErrors>
		<NoWarn>$(NoWarn);CS1998;CS8632;CS0067;NU1100</NoWarn> <!-- Suppress specific C# warnings and NuGet warnings -->
		<NullabilityInfoContextSupport>true</NullabilityInfoContextSupport>

		<!-- Windows Specific -->
		<WindowsPackageType>None</WindowsPackageType>
		<WindowsAppSDKSelfContained>true</WindowsAppSDKSelfContained>

		<!-- Display name -->
		<ApplicationTitle>TDFMAUI</ApplicationTitle>

		<!-- App Identifier -->
		<ApplicationId>com.companyname.tdfmaui</ApplicationId>

		<!-- Versions -->
		<ApplicationDisplayVersion>1.0</ApplicationDisplayVersion>
		<ApplicationVersion>1</ApplicationVersion>

		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'">11.0</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst'">13.1</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'">21.0</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</SupportedOSPlatformVersion>
		<TargetPlatformMinVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</TargetPlatformMinVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'tizen'">6.5</SupportedOSPlatformVersion>

		<!-- Fix missing AppManifest error -->
		<GenerateAppxPackageOnBuild>false</GenerateAppxPackageOnBuild>
		<CreateAppxPackageOnBuild>false</CreateAppxPackageOnBuild>
		<EnableMsixTooling>false</EnableMsixTooling>
		<DisableMsixProjectCapabilityAddedByProject>true</DisableMsixProjectCapabilityAddedByProject>
		<WindowsPackageType>None</WindowsPackageType>

		<!-- Settings for standalone execution -->
		<IncludeAllContentForSelfExtract>true</IncludeAllContentForSelfExtract>
		<IncludeNativeLibrariesForSelfExtract>true</IncludeNativeLibrariesForSelfExtract>
		<CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
	</PropertyGroup>

	<!-- Android specific JAVAC options -->
	<PropertyGroup Condition="'$(TargetFramework)' == 'net8.0-android'">
		<AndroidJavacTargetOptions>-Xlint:-options</AndroidJavacTargetOptions>
		<!-- Ensure all required assemblies are included -->
		<AndroidLinkMode>None</AndroidLinkMode>
		<AndroidEnableProfiledAot>false</AndroidEnableProfiledAot>
		<AndroidUseAapt2>true</AndroidUseAapt2>
		<AndroidCreatePackagePerAbi>false</AndroidCreatePackagePerAbi>
	</PropertyGroup>

	<ItemGroup>
		<!-- App Icon -->
		<MauiIcon Include="Resources\AppIcon\appicon.svg" ForegroundFile="Resources\AppIcon\appiconfg.svg" Color="#512BD4" />

		<!-- Splash Screen -->
		<MauiSplashScreen Include="Resources\Splash\splash.svg" Color="#512BD4" BaseSize="128,128" />

		<!-- Images -->
		<MauiImage Include="Resources\Images\*" />
		<MauiImage Update="Resources\Images\dotnet_bot.png" Resize="True" BaseSize="300,185" />

		<!-- Custom Fonts -->
		<MauiFont Include="Resources\Fonts\*" />

		<!-- Raw Assets (also remove the original json theme file) -->
		<MauiAsset Include="Resources\Raw\**" LogicalName="%(RecursiveDir)%(Filename)%(Extension)" />
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="CommunityToolkit.Maui" Version="8.0.0" />
		<PackageReference Include="CommunityToolkit.Mvvm" Version="8.2.2" />
		<PackageReference Include="Microsoft.Extensions.Configuration.Binder" Version="8.0.1" />
		<PackageReference Include="Microsoft.Extensions.Configuration.Json" Version="8.0.0" />
		<PackageReference Include="Microsoft.Maui.Controls" Version="$(MauiVersion)" />
		<PackageReference Include="Microsoft.Maui.Controls.Compatibility" Version="$(MauiVersion)" />
		<PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="8.0.0" />
		<PackageReference Include="Microsoft.AspNetCore.SignalR.Client" Version="8.0.6" />
		<PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
		<PackageReference Include="System.IdentityModel.Tokens.Jwt" Version="7.6.0" />
	</ItemGroup>

	<ItemGroup>
		<None Update="appsettings.json">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
		</None>
	</ItemGroup>

	<ItemGroup>
		<EmbeddedResource Include="appsettings.json">
			<LogicalName>TDFMAUI.appsettings.json</LogicalName>
		</EmbeddedResource>
	</ItemGroup>

	<ItemGroup>
		<ProjectReference Include="..\TDFShared\TDFShared.csproj" />
	</ItemGroup>

	<ItemGroup>
		<!-- Clean up old commented-out references if any -->
		<!-- Add new Feature references -->
		<Compile Update="Features\**\*.xaml.cs">
			<DependentUpon>%(Filename)</DependentUpon>
		</Compile>
		<MauiXaml Update="Features\**\*.xaml">
			<Generator>MSBuild:Compile</Generator>
		</MauiXaml>
		<!-- Add Compile entry for ViewModels within Features -->
		<Compile Update="Features\**\*ViewModel.cs">
			<SubType>Code</SubType>
		</Compile>
		<!-- Include other necessary cs files like Models or specific logic files if they were moved to Features -->
		<!-- Switched to Include+Exclude to avoid using Exclude on Update -->
		<Compile Include="Features\**\*.cs" Exclude="Features\**\*ViewModel.cs;Features\**\*.xaml.cs">
			<SubType>Code</SubType>
		</Compile>
	</ItemGroup>

	<ItemGroup Condition="'$(TargetFramework)' == 'net8.0-windows10.0.19041.0'">
	  <PackageReference Include="Microsoft.Maui.Graphics.Win2D.WinUI.Desktop">
	    <Version>8.0.100</Version>
	  </PackageReference>
	  <!-- Add direct reference to Microsoft.WindowsAppSDK to control the version -->
	  <PackageReference Include="Microsoft.WindowsAppSDK" Version="1.5.240802000" />
	</ItemGroup>

	<!-- Android-specific references -->
	<ItemGroup Condition="'$(TargetFramework)' == 'net8.0-android'">
	  <!-- Rely on SDK to provide these assemblies. TrimmerRootAssembly ensures they are not linked out if used. -->
	  <TrimmerRootAssembly Include="System.IO.Compression" />
	  <TrimmerRootAssembly Include="System.IO.Compression.Brotli" />
	  <TrimmerRootAssembly Include="System.IO.Compression.ZipFile" />

	  <!-- Add missing AndroidX packages -->
	  <PackageReference Include="Xamarin.AndroidX.AppCompat" Version="1.6.1.3" />
	  <PackageReference Include="Xamarin.AndroidX.AppCompat.AppCompatResources" Version="1.6.1.3" />
	</ItemGroup>

	<!-- Windows Specific -->
	<PropertyGroup Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">
		<ApplicationId>com.companyname.tdfmaui</ApplicationId>
		<WindowsPackageType>None</WindowsPackageType>
		<WindowsPackageTargetPlatform>x64</WindowsPackageTargetPlatform>
		<WindowsAppSDKSelfContained>true</WindowsAppSDKSelfContained>
		<EnableMsixTooling>false</EnableMsixTooling>
		<GenerateAppInstallerFile>False</GenerateAppInstallerFile>
		<AppxPackageSigningEnabled>False</AppxPackageSigningEnabled>
		<PackageCertificateKeyFile>TDFMAUI_TemporaryKey.pfx</PackageCertificateKeyFile>
		<AppxPackageSigningTimestampDigestAlgorithm>SHA256</AppxPackageSigningTimestampDigestAlgorithm>
		<!-- Set OutputType to WinExe for Windows to hide console window -->
		<OutputType>WinExe</OutputType>
		<AppxAutoIncrementPackageRevision>False</AppxAutoIncrementPackageRevision>
		<AppxSymbolPackageEnabled>False</AppxSymbolPackageEnabled>
		<GenerateTestArtifacts>False</GenerateTestArtifacts>
		<HoursBetweenUpdateChecks>0</HoursBetweenUpdateChecks>
		<UseWinUI>true</UseWinUI>
		<EnableDefaultCompileItems>true</EnableDefaultCompileItems>

		<!-- Additional settings to disable MSIX packaging and enable standalone execution -->
		<EnableDefaultPageItems>false</EnableDefaultPageItems>
		<EnableDefaultApplicationDefinition>false</EnableDefaultApplicationDefinition>
		<DisableEmbeddedXbf>true</DisableEmbeddedXbf>
		<DisableMsixProjectCapabilityAddedByProject>true</DisableMsixProjectCapabilityAddedByProject>
		<DisableXbfLineInfo>true</DisableXbfLineInfo>
		<GenerateAppxPackageOnBuild>false</GenerateAppxPackageOnBuild>
		<WindowsAppSDKSelfContained>true</WindowsAppSDKSelfContained>

		<!-- Settings for standalone execution -->
		<SelfContained>true</SelfContained>
		<RuntimeIdentifier>win10-x64</RuntimeIdentifier>
		<PublishSingleFile>false</PublishSingleFile>
		<PublishReadyToRun>false</PublishReadyToRun>
		<IncludeNativeLibrariesForSelfExtract>true</IncludeNativeLibrariesForSelfExtract>
		<DebugType>embedded</DebugType>

		<!-- Additional settings for standalone execution -->
		<UseRidGraph>true</UseRidGraph>
		<EnableCompressionInSingleFile>false</EnableCompressionInSingleFile>
		<EnableUnsafeBinaryFormatterSerialization>true</EnableUnsafeBinaryFormatterSerialization>
		<EnableUnsafeUTF7Encoding>true</EnableUnsafeUTF7Encoding>
		<EventSourceSupport>true</EventSourceSupport>
		<HttpActivityPropagationSupport>true</HttpActivityPropagationSupport>
		<MetadataUpdaterSupport>true</MetadataUpdaterSupport>
		<UseSystemResourceKeys>false</UseSystemResourceKeys>
		<DebuggerSupport>true</DebuggerSupport>
		<StartupHookSupport>true</StartupHookSupport>
	</PropertyGroup>

	<!-- Create missing directories for Windows build -->
	<Target Name="CreateAppManifestDirectory" BeforeTargets="BeforeBuild" Condition="'$(TargetFramework)' == 'net8.0-windows10.0.19041.0'">
		<!-- Create both directory paths that might be needed -->
		<MakeDir Directories="$(ProjectDir)obj\Debug\net8.0-windows10.0.19041.0\MsixContent" />
		<MakeDir Directories="$(ProjectDir)obj\Debug\net8.0-windows10.0.19041.0\win10-x64\MsixContent" />

		<!-- Define the AppManifest content -->
		<PropertyGroup>
			<AppManifestContent>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;Package xmlns=&quot;http://schemas.microsoft.com/appx/manifest/foundation/windows10&quot;
         xmlns:uap=&quot;http://schemas.microsoft.com/appx/manifest/uap/windows10&quot;
         xmlns:rescap=&quot;http://schemas.microsoft.com/appx/manifest/foundation/windows10/restrictedcapabilities&quot;
         IgnorableNamespaces=&quot;uap rescap&quot;&gt;
  &lt;Identity Name=&quot;com.companyname.tdfmaui&quot;
            Publisher=&quot;CN=User Name&quot;
            Version=&quot;1.0.0.0&quot; /&gt;
  &lt;Properties&gt;
    &lt;DisplayName&gt;TDFMAUI&lt;/DisplayName&gt;
    &lt;PublisherDisplayName&gt;Company Name&lt;/PublisherDisplayName&gt;
    &lt;Logo&gt;Assets\appiconStoreLogo.png&lt;/Logo&gt;
  &lt;/Properties&gt;
  &lt;Dependencies&gt;
    &lt;TargetDeviceFamily Name=&quot;Windows.Universal&quot; MinVersion=&quot;10.0.17763.0&quot; MaxVersionTested=&quot;10.0.19041.0&quot; /&gt;
    &lt;TargetDeviceFamily Name=&quot;Windows.Desktop&quot; MinVersion=&quot;10.0.17763.0&quot; MaxVersionTested=&quot;10.0.19041.0&quot; /&gt;
  &lt;/Dependencies&gt;
  &lt;Resources&gt;
    &lt;Resource Language=&quot;x-generate&quot; /&gt;
  &lt;/Resources&gt;
  &lt;Applications&gt;
    &lt;Application Id=&quot;App&quot; Executable=&quot;$targetnametoken$.exe&quot; EntryPoint=&quot;$targetentrypoint$&quot;&gt;
      &lt;uap:VisualElements DisplayName=&quot;TDFMAUI&quot;
                          Description=&quot;TDFMAUI&quot;
                          Square150x150Logo=&quot;Assets\appiconMediumTile.png&quot;
                          Square44x44Logo=&quot;Assets\appiconLogo.png&quot;
                          BackgroundColor=&quot;transparent&quot;&gt;
        &lt;uap:DefaultTile Square71x71Logo=&quot;Assets\appiconSmallTile.png&quot; Wide310x150Logo=&quot;Assets\appiconWideTile.png&quot; Square310x310Logo=&quot;Assets\appiconLargeTile.png&quot; ShortName=&quot;TDFMAUI&quot;&gt;
          &lt;uap:ShowNameOnTiles&gt;
            &lt;uap:ShowOn Tile=&quot;square150x150Logo&quot; /&gt;
            &lt;uap:ShowOn Tile=&quot;wide310x150Logo&quot; /&gt;
          &lt;/uap:ShowNameOnTiles&gt;
        &lt;/uap:DefaultTile&gt;
        &lt;uap:SplashScreen Image=&quot;Assets\splashSplashScreen.png&quot; /&gt;
      &lt;/uap:VisualElements&gt;
    &lt;/Application&gt;
  &lt;/Applications&gt;
  &lt;Capabilities&gt;
    &lt;rescap:Capability Name=&quot;runFullTrust&quot; /&gt;
  &lt;/Capabilities&gt;
&lt;/Package&gt;</AppManifestContent>
		</PropertyGroup>

		<!-- Write the file to both possible locations -->
		<WriteLinesToFile File="$(ProjectDir)obj\Debug\net8.0-windows10.0.19041.0\MsixContent\AppxManifest.xml"
						  Lines="$(AppManifestContent)" Overwrite="true"/>
		<WriteLinesToFile File="$(ProjectDir)obj\Debug\net8.0-windows10.0.19041.0\win10-x64\MsixContent\AppxManifest.xml"
						  Lines="$(AppManifestContent)" Overwrite="true"/>
	</Target>

	<!-- Bypass the problematic PRI generation task -->
	<Target Name="BypassPriGenTask" BeforeTargets="_GeneratePriFiles;GeneratePriFile;_GenerateProjectPriFile" Condition="'$(TargetFramework)' == 'net8.0-windows10.0.19041.0'">
		<PropertyGroup>
			<GenerateMsixPackageWithoutPriFiles>true</GenerateMsixPackageWithoutPriFiles>
			<MsixGenerateAppxPackageOnBuild>false</MsixGenerateAppxPackageOnBuild>
			<GenerateAppxPackageOnBuild>false</GenerateAppxPackageOnBuild>
			<AppxBundle>Never</AppxBundle>
			<GenerateAppInstallerFile>false</GenerateAppInstallerFile>
			<AppxPackageSigningEnabled>false</AppxPackageSigningEnabled>
			<MsixSkipResourceGeneration>true</MsixSkipResourceGeneration>
		</PropertyGroup>
	</Target>

	<!-- Completely disable the ExpandPriContent task -->
	<Target Name="DisableExpandPriContent" BeforeTargets="Build" Condition="'$(TargetFramework)' == 'net8.0-windows10.0.19041.0'">
		<PropertyGroup>
			<ExpandPriContentDependsOn></ExpandPriContentDependsOn>
		</PropertyGroup>
	</Target>

	<!-- Override the problematic PRI generation targets -->
	<Target Name="_GeneratePriFiles" Condition="'$(TargetFramework)' == 'net8.0-windows10.0.19041.0'" />
	<Target Name="GeneratePriFile" Condition="'$(TargetFramework)' == 'net8.0-windows10.0.19041.0'" />
	<Target Name="_GenerateProjectPriFile" Condition="'$(TargetFramework)' == 'net8.0-windows10.0.19041.0'" />

	<!-- Override the problematic task with an empty implementation -->
	<Target Name="DisablePriGeneration" BeforeTargets="BeforeBuild" Condition="'$(TargetFramework)' == 'net8.0-windows10.0.19041.0'">
		<PropertyGroup>
			<!-- Disable PRI generation completely -->
			<GeneratePriFile>false</GeneratePriFile>
			<GeneratePriIndexName>false</GeneratePriIndexName>
			<GenerateProjectPriFile>false</GenerateProjectPriFile>
			<MsixSkipResourceGeneration>true</MsixSkipResourceGeneration>
		</PropertyGroup>
	</Target>

	<!-- Disable all Windows App SDK packaging -->
	<PropertyGroup Condition="'$(TargetFramework)' == 'net8.0-windows10.0.19041.0'">
		<EnableMsixTooling>false</EnableMsixTooling>
		<WindowsPackageType>None</WindowsPackageType>
		<WindowsAppSDKSelfContained>true</WindowsAppSDKSelfContained>
	</PropertyGroup>

	<!-- Copy all required files for standalone execution -->
	<Target Name="CopyFilesForStandaloneExecution" AfterTargets="Build" Condition="'$(TargetFramework)' == 'net8.0-windows10.0.19041.0'">
		<!-- Copy appsettings.json to output directory -->
		<Copy SourceFiles="$(ProjectDir)appsettings.json"
			  DestinationFolder="$(OutDir)"
			  SkipUnchangedFiles="true" />

		<!-- Create a .runtimeconfig.json file to ensure proper runtime loading -->
		<PropertyGroup>
			<RuntimeConfigContent>
{
  "runtimeOptions": {
    "tfm": "net8.0",
    "framework": {
      "name": "Microsoft.NETCore.App",
      "version": "8.0.0"
    },
    "configProperties": {
      "System.Reflection.Metadata.MetadataUpdater.IsSupported": true
    }
  }
}
			</RuntimeConfigContent>
		</PropertyGroup>
		<WriteLinesToFile File="$(OutDir)TDFMAUI.runtimeconfig.json"
						  Lines="$(RuntimeConfigContent)"
						  Overwrite="true"
						  Condition="!Exists('$(OutDir)TDFMAUI.runtimeconfig.json')" />
	</Target>

	<!-- Create a standalone publish profile -->
	<Target Name="CreateStandalonePublishProfile" AfterTargets="Build" Condition="'$(TargetFramework)' == 'net8.0-windows10.0.19041.0'">
		<PropertyGroup>
			<PublishProfileContent>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;Project&gt;
  &lt;PropertyGroup&gt;
    &lt;Configuration&gt;Release&lt;/Configuration&gt;
    &lt;Platform&gt;x64&lt;/Platform&gt;
    &lt;PublishDir&gt;bin\Release\net8.0-windows10.0.19041.0\win10-x64\publish\&lt;/PublishDir&gt;
    &lt;PublishProtocol&gt;FileSystem&lt;/PublishProtocol&gt;
    &lt;TargetFramework&gt;net8.0-windows10.0.19041.0&lt;/TargetFramework&gt;
    &lt;RuntimeIdentifier&gt;win10-x64&lt;/RuntimeIdentifier&gt;
    &lt;SelfContained&gt;true&lt;/SelfContained&gt;
    &lt;PublishSingleFile&gt;false&lt;/PublishSingleFile&gt;
    &lt;PublishReadyToRun&gt;false&lt;/PublishReadyToRun&gt;
    &lt;IncludeNativeLibrariesForSelfExtract&gt;true&lt;/IncludeNativeLibrariesForSelfExtract&gt;
    &lt;IncludeAllContentForSelfExtract&gt;true&lt;/IncludeAllContentForSelfExtract&gt;
  &lt;/PropertyGroup&gt;
&lt;/Project&gt;
			</PublishProfileContent>
		</PropertyGroup>
		<MakeDir Directories="$(ProjectDir)Properties\PublishProfiles" Condition="!Exists('$(ProjectDir)Properties\PublishProfiles')" />
		<WriteLinesToFile File="$(ProjectDir)Properties\PublishProfiles\win-x64.pubxml"
						  Lines="$(PublishProfileContent)"
						  Overwrite="true"
						  Condition="!Exists('$(ProjectDir)Properties\PublishProfiles\win-x64.pubxml')" />
	</Target>

	<!-- Copy System.IO.Compression assemblies for Android -->
	<Target Name="CopyCompressionAssemblies" AfterTargets="_CopyResolvedAssemblies" Condition="'$(TargetFramework)' == 'net8.0-android'">
		<PropertyGroup>
			<CompressionAssembliesDir>$(MSBuildThisFileDirectory)..\..\..\..\Program Files\dotnet\packs\Microsoft.NETCore.App.Runtime.Mono.android-x86\8.0.0\runtimes\android-x86\lib\net8.0</CompressionAssembliesDir>
		</PropertyGroup>

		<!-- Find the assemblies in the SDK directory -->
		<ItemGroup>
			<CompressionAssemblies Include="$(CompressionAssembliesDir)\System.IO.Compression.dll" />
			<CompressionAssemblies Include="$(CompressionAssembliesDir)\System.IO.Compression.Brotli.dll" />
			<CompressionAssemblies Include="$(CompressionAssembliesDir)\System.IO.Compression.ZipFile.dll" />
		</ItemGroup>

		<!-- Copy to the Android assets directory -->
		<Copy SourceFiles="@(CompressionAssemblies)"
			  DestinationFolder="$(IntermediateOutputPath)android\assets\"
			  SkipUnchangedFiles="true"
			  Condition="Exists('$(IntermediateOutputPath)android\assets\')" />

		<Message Text="Copied compression assemblies to Android assets directory" Importance="high" />
	</Target>
</Project>
